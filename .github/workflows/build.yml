name: "Build kernels"

env:
  OUT_DIR: "${{ github.workspace }}/out"

on:
  workflow_dispatch:

jobs:
  Set-repos:
    name: "üêÇ Parse repos.json"
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.generate-matrix.outputs.repos }}
      builddate: ${{ steps.generate-builddate.outputs.builddate }}
    steps:
      - name: "üòÑ Checkout"
        uses: actions/checkout@v3

      - name: "üòÜ Generate Matrix"
        id: generate-matrix
        run: |
          echo "repos<<EOF" >> $GITHUB_OUTPUT
          jq -s '[.[][]]' repos/repos*.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: "‚è∞ Set builddate"
        id: generate-builddate
        run: echo "builddate=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

  Build-Kernel:
    name: "üêé Build kernel"
    runs-on: ubuntu-latest
    needs:
      - Set-repos
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        repos: ${{ fromJSON(needs.Set-repos.outputs.repos) }}
    env:
      WORKSPACE: ${{ github.workspace }}

      builddate: "${{ needs.Set-repos.outputs.builddate }}"

      KERNEL_NAME: ${{ matrix.repos.kernelSource.name }}
      KERNEL_REPO: ${{ matrix.repos.kernelSource.repo }}
      KERNEL_BRANCH: ${{ matrix.repos.kernelSource.branch }}
      KERNEL_DEVICE: ${{ matrix.repos.kernelSource.device }}

      DEFCONFIG_NAME: ${{ matrix.repos.kernelSource.defconfig }}

      withKernelSU: ${{ matrix.repos.withKernelSU }}
      ccache: ${{ matrix.repos.ccache }}
      useAnykernel: ${{ matrix.repos.AnyKernel3.use }}
      release: ${{ matrix.repos.AnyKernel3.release }}
    steps:
      - name: "‚≠ê Install prerequisites"
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc gcc-aarch64-linux-gnu lld gcc-arm-linux-gnueabi libssl-dev libfl-dev
          sudo apt-get install -y curl git ftp lftp wget libarchive-tools ccache python2 python2-dev
          sudo apt-get install -y zip unzip tar gzip bzip2 rar unrar

      - name: "üöÑ Create cache key from `repos`"
        if: ${{ env.ccache == 'true' }}
        id: ccache_key
        run: |
          ccache -o compression=false -o cache_dir=$HOME/.ccache
          echo "CACHE_KEY=$(echo -n '${{ toJSON(matrix.repos) }}' | base64 -w 0 | cut -c -48)" >> $GITHUB_OUTPUT

      - name: "üöÖ Cache ccache files"
        if: ${{ env.ccache == 'true' }}
        uses: actions/cache@v3
        with:
          path: |
            ~/.ccache
            ${{ env.OUT_DIR }}
          key: ccache-${{ env.KERNEL_NAME }}-${{ steps.ccache_key.outputs.CACHE_KEY }}-${{ env.builddate }}
          restore-keys: |
            ccache-${{ env.KERNEL_NAME }}-${{ steps.ccache_key.outputs.CACHE_KEY }}-${{ env.builddate }}

      - name: "‚è∞ Setup Anykernel3"
        env:
          params: "${{ toJSON(matrix.repos.AnyKernel3) }}"
        run: |
          ANYKERNEL_REPO=$(echo $params | jq -r ".repo")
          ANYKERNEL_BRANCH=$(echo $params | jq -r ".branch")
          git clone --recursive --depth=1 -j $(nproc) --branch $ANYKERNEL_BRANCH $ANYKERNEL_REPO AnyKernel3

          echo "ü§î Setup Anykernel3 => ($ANYKERNEL_REPO)"

      - name: "üåü Clone kernel source => (${{ env.KERNEL_REPO }})"
        run: |
          git clone --recursive --depth=1 -j $(nproc) --branch $KERNEL_BRANCH $KERNEL_REPO $KERNEL_NAME

          echo "ü§î Clone kernel source => ($KERNEL_REPO)"

      - name: üî¢ Extract kernel version
        working-directory: ${{ env.KERNEL_NAME }}
        run: |
          kernel_version=$(grep "^VERSION = " Makefile | cut -d ' ' -f 3)
          patchlevel=$(grep "^PATCHLEVEL = " Makefile | cut -d ' ' -f 3)
          sublevel=$(grep "^SUBLEVEL = " Makefile | cut -d ' ' -f 3)
          local_kernel_version="${kernel_version}.${patchlevel}.${sublevel}"
          echo "Kernel Version: $local_kernel_version"
          echo "KERNEL_VERSION=${local_kernel_version}" >> $GITHUB_ENV

      - name: "üí´ Get toolchains"
        env:
          toolchains: "${{ toJSON(matrix.repos.toolchains) }}"
        run: |
          toolchains_num="$(echo $toolchains | jq 'length')"
          echo "ü§î There is $toolchains_num defined toolchains."
          for ((i=0;i<toolchains_num;i++)); do
            toolchain_name=$(echo $toolchains | jq -r ".[$i].name")
            toolchain_repo=$(echo $toolchains | jq -r ".[$i].repo")
            toolchain_branch=$(echo $toolchains | jq -r ".[$i].branch")
            toolchain_url=$(echo $toolchains | jq -r ".[$i].url")
            
            echo $toolchain_url
            if [ -z "${toolchain_url:-}" ] || [ "$toolchain_url" = "null" ];  then
              git clone --recursive --depth=1 -j $(nproc) --branch $toolchain_branch $toolchain_repo $toolchain_name
              echo "ü§î Clone $toolchain_name => ($toolchain_repo)"
            else
              wget "$toolchain_url"
              filename="${toolchain_url##*/}"
              mkdir -p $toolchain_name
              case "$filename" in
                *.zip)
                  unzip -d $toolchain_name "$filename"
                  ;;
                *.tar)
                  tar xvf "$filename" -C $toolchain_name
                  ;;
                *.tar.gz)
                  tar zxvf "$filename" -C $toolchain_name
                  ;;
                *.rar)
                  unrar x "$filename" $toolchain_name
                  ;;
                *)
                  echo "unknown file type: $filename"
                  ;;
              esac
            fi

            jq -r ".[$i].binPath[] | tostring" <<< "$toolchains" | while read -r bin_path; do
              echo "$WORKSPACE/$toolchain_name/$bin_path" >> $GITHUB_PATH
            done
          done

      - name: "üòé Set args"
        id: generate-args
        env:
          params: "${{ toJSON(matrix.repos.params) }}"
          THREAD: $(nproc --all)
        run: |
          echo "ü§î PATH Variable: $PATH"

          ARCH=$(echo $params | jq -r ".ARCH")
          CC=$(echo $params | jq -r ".CC")

          args="-j${{ env.THREAD }}"
          if [ -n "${{ env.OUT_DIR }}" ]; then
            mkdir -p ${{ env.OUT_DIR }} && args="$args O=${{ env.OUT_DIR }}"
          fi
          if [ -n "$ARCH" ]; then
            args="$args ARCH=$ARCH"
          fi
          if [ -n "$CC" ]; then

            if [[ "$CC" == *"/"* ]]; then
              CC=${{ env.WORKSPACE }}/$CC
            fi

            if [ ${{ env.ccache }} = true ]; then
              args="$args CC=\"ccache $CC\""
            else
              args="$args CC=$CC"
            fi
          fi
          while read -r externalCommand; do
            key=$(echo "$externalCommand" | cut -d= -f1)
            value=$(echo "$externalCommand" | cut -d= -f2)
            if [[ "$value" == *"/"* ]]; then
              value="${{ env.WORKSPACE }}/$value"
            fi
            args="$args $key=$value"
          done < <(jq -r '.externalCommand | to_entries[] | "\(.key)=\(.value)"' <<< "$params")
        
          echo "ü§î $args"
          echo "ARCH=$ARCH" >> $GITHUB_OUTPUT
          echo "args=$args" >> $GITHUB_OUTPUT

      - name: "üòã Update KernelSU"
        working-directory: ${{ env.KERNEL_NAME }}
        env:
          arch: ${{ steps.generate-args.outputs.ARCH }}
        if: ${{ env.withKernelSU == 'true' }}
        run: |
          if [ -d "./KernelSU" ]; then
            rm -rf "./KernelSU"
          fi
          if [ -d "./drivers/kernelsu" ]; then
            rm -rf "./drivers/kernelsu"
          fi

          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s v0.9.5

          echo -e "CONFIG_KPROBES=y\nCONFIG_FUNCTION_TRACER=y\nCONFIG_EVENT_TRACER=y\nCONFIG_FTRACE=y\nCONFIG_UPROBES=y\nCONFIG_KPROBE_EVENTS=y" >> .config

      - name: "üîß Build Kernel"
        working-directory: ${{ env.KERNEL_NAME }}
        run: |
          eval ${{ steps.generate-args.outputs.args }}
          make $DEFCONFIG_NAME
          make $args

      - name: "üì¶ Create Kernel Zip"
        working-directory: ${{ env.KERNEL_NAME }}
        run: |
          if [ ! -d "AnyKernel3" ]; then
            echo "AnyKernel3 not found"
            exit 1
          fi
          cd AnyKernel3
          mkdir -p ramdisk
          mkdir -p dlkm

          # Add ramdisk
          cp -r $WORKSPACE/${{ env.KERNEL_NAME }}/arch/arm/boot/zImage ramdisk/
          cp -r $WORKSPACE/${{ env.KERNEL_NAME }}/out/arch/arm/boot/zImage ramdisk/

          # Add DLKM files
          cp -r $WORKSPACE/${{ env.KERNEL_NAME }}/out/dlkm/* dlkm/

          # Create the zip
          zip -r9 ${KERNEL_NAME}-${KERNEL_DEVICE}-${builddate}.zip ramdisk/* dlkm/*

      - name: "üèÅ Upload Kernel Zip"
        uses: actions/upload-artifact@v3
        with:
          name: "${{ env.KERNEL_NAME }}-${{ env.KERNEL_DEVICE }}-${{ env.builddate }}.zip"
          path: "AnyKernel3/${{ env.KERNEL_NAME }}-${{ env.KERNEL_DEVICE }}-${{ env.builddate }}.zip"
